{"version":3,"sources":["img/favorite-white.svg","img/favorite.svg","img/comment_icon.svg","components/IconeComContador/IconeComContador.js","components/SecaoComentario/SecaoComentario.js","components/Post/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IconeComContador","props","className","alt","src","icone","onClick","onClickIcone","valorContador","SecaoComentario","placeholder","value","onChange","onChangeComentario","aoEnviar","Post","iconeCurtida","componenteComentario","useState","numeroCurtidas","setnumeroCurtidas","curtido","setCurtido","comentando","setComentando","numeroComentarios","setNumeroComentarios","aoEnviarComentario","iconeCoracaoPreto","iconeCoracaoBranco","fotoUsuario","nomeUsuario","fotoPost","console","log","iconeComentario","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,4C,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,kOCMpC,SAASC,EAAiBC,GAChC,OAAO,yBAAKC,UAAU,iBACrB,yBAAMA,UAAW,YAAYC,IAAK,QAASC,IAAKH,EAAMI,MAAOC,QAASL,EAAMM,eAC5E,2BAAIN,EAAMO,gB,0DCLL,SAASC,EAAgBR,GAC/B,OACC,yBAAKC,UAAU,oBACd,2BAAOA,UAAU,kBAChBQ,YAAa,gBACbC,MAAO,GACPC,SAAUX,EAAMY,qBAEjB,4BAAQP,QAASL,EAAMa,UAAvB,WCuEYC,MA1Ef,SAAcd,GAAQ,IA6BhBe,EAQAC,EArCe,EACyBC,mBAAS,GADlC,mBACZC,EADY,KACIC,EADJ,OAEWF,oBAAS,GAFpB,mBAEZG,EAFY,KAEHC,EAFG,OAGiBJ,oBAAS,GAH1B,mBAGZK,EAHY,KAGAC,EAHA,OAI+BN,mBAAS,GAJxC,mBAIZO,EAJY,KAIOC,EAJP,KAwBbC,EAAqB,WACzBH,GAAc,GACdE,EAAqBD,EAAoB,IAiB3C,OAXET,EADEK,EACaO,IAEAC,IAKbN,IACFN,EAAuB,kBAACR,EAAD,CAAiBK,SAAUa,KAIlD,yBAAKzB,UAAU,iBACb,yBAAKA,UAAU,cACb,yBACEA,UAAU,YACVE,IAAKH,EAAM6B,YACX3B,IAAK,sBAEP,2BAAIF,EAAM8B,cAGZ,yBAAK7B,UAAU,YAAYE,IAAKH,EAAM+B,SAAU7B,IAAK,mBAErD,yBAAKD,UAAU,cACb,kBAACF,EAAD,CACEK,MAAOW,EACPT,aArDe,WACrBe,GAAYD,GAEZD,EADGC,EACeF,EAAiB,EAEjBA,EAAiB,GAEnCc,QAAQC,IAAI,WA+CN1B,cAAeW,IAGjB,kBAACnB,EAAD,CACEK,MAAO8B,IACP5B,aAjDkB,WACxBiB,GAAeD,GACXA,IACFN,EAAuB,kBAACR,EAAD,CAAiBK,SAAUa,KAEpDM,QAAQC,IAAIX,IA6CNf,cAAeiB,KAGlBR,I,MCjDQmB,MAxBf,WACA,OACE,yBAAKlC,UAAU,iBACN,kBAAC,EAAD,CACC6B,YAAa,WACbD,YAAa,8BACbE,SAAU,kCAEV,kBAAC,EAAD,CACAD,YAAa,SACbD,YAAa,8BACbE,SAAU,kCAEV,kBAAC,EAAD,CACAD,YAAa,SACbD,YAAa,8BACbE,SAAU,oCCTFK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9a98fd39.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favorite-white.042aa417.svg\";","module.exports = __webpack_public_path__ + \"static/media/favorite.4c67d875.svg\";","module.exports = __webpack_public_path__ + \"static/media/comment_icon.de299b47.svg\";","import React from 'react'\nimport './style.css'\n\n\n\n\nexport function IconeComContador(props) {\n\treturn <div className='IconContainer'>\n\t\t< img className ='IconImage' alt={'Icone'} src={props.icone} onClick={props.onClickIcone}/>\n\t\t<p>{props.valorContador}</p>\n\t</div>\n}\n","import React from 'react'\nimport './style.css'\n\n\nexport function SecaoComentario(props) {\n\treturn (\n\t\t<div className='CommentContainer'>\n\t\t\t<input className='InputComentario'\n\t\t\t\tplaceholder={'ComentÃ¡rio'}\n\t\t\t\tvalue={''}\n\t\t\t\tonChange={props.onChangeComentario}\n\t\t\t/>\n\t\t\t<button onClick={props.aoEnviar}>Enviar</button>\n\t\t</div>\n\t)\n}","import React, { useState } from 'react'\nimport './style.css'\n\nimport { IconeComContador } from '../IconeComContador/IconeComContador'\nimport iconeCoracaoBranco from '../../img/favorite-white.svg'\nimport iconeCoracaoPreto from '../../img/favorite.svg'\nimport iconeComentario from '../../img/comment_icon.svg'\nimport { SecaoComentario } from '../SecaoComentario/SecaoComentario'\n\nfunction Post(props) {\n  const [numeroCurtidas, setnumeroCurtidas] = useState(0)\n  const [curtido, setCurtido] = useState(false)\n  const [comentando, setComentando] = useState(false)\n  const [numeroComentarios, setNumeroComentarios] = useState(0)\n\n  const onClickCurtida = () => {\n    setCurtido(!curtido)\n    if(curtido) {\n    setnumeroCurtidas(numeroCurtidas - 1)\n  }else{\n    setnumeroCurtidas(numeroCurtidas + 1)\n  }\n    console.log(\"Curtiu\")\n  }\n\n  const onClickComentario = () => {\n    setComentando(!comentando)\n    if (comentando) {\n      componenteComentario = <SecaoComentario aoEnviar={aoEnviarComentario} />\n    }\n    console.log(comentando)\n  }\n\n  const aoEnviarComentario = () => {\n    setComentando(false)\n    setNumeroComentarios(numeroComentarios + 1)\n  }\n\n  let iconeCurtida\n\n  if (curtido) {\n    iconeCurtida = iconeCoracaoPreto\n  } else {\n    iconeCurtida = iconeCoracaoBranco\n  }\n\n  let componenteComentario\n\n  if (comentando) {\n    componenteComentario = <SecaoComentario aoEnviar={aoEnviarComentario} />\n  }\n\n  return (\n    <div className=\"PostContainer\">\n      <div className=\"PostHeader\">\n        <img\n          className=\"UserPhoto\"\n          src={props.fotoUsuario}\n          alt={'Imagem do usuario'}\n        />\n        <p>{props.nomeUsuario}</p>\n      </div>\n\n      <img className=\"PostPhoto\" src={props.fotoPost} alt={'Imagem do post'} />\n\n      <div className=\"PostFooter\">\n        <IconeComContador\n          icone={iconeCurtida}\n          onClickIcone={onClickCurtida}\n          valorContador={numeroCurtidas}\n        />\n\n        <IconeComContador\n          icone={iconeComentario}\n          onClickIcone={onClickComentario}\n          valorContador={numeroComentarios}\n        />\n      </div>\n      {componenteComentario}\n    </div>\n  )\n}\n\nexport default Post\n","import React from 'react';\nimport Post from './components/Post/Post';\nimport './style.css'\n\n\nfunction App() {\nreturn(\n  <div className='MainContainer'>\n           <Post\n            nomeUsuario={'paulinha'}\n            fotoUsuario={'https://picsum.photos/50/50'}\n            fotoPost={'https://picsum.photos/200/150'}\n            />\n            <Post\n            nomeUsuario={'Josefa'}\n            fotoUsuario={'https://picsum.photos/50/50'}\n            fotoPost={'https://picsum.photos/200/150'}\n            />\n            <Post\n            nomeUsuario={'Carlos'}\n            fotoUsuario={'https://picsum.photos/50/50'}\n            fotoPost={'https://picsum.photos/200/150'}\n          />\n  </div>\n)\n\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}